{"version":3,"sources":["components/Contacts/Contact.module.css","components/Form/Form.module.css","components/Form/Alert.module.css","components/Form/transition/alert.module.css","components/Contacts/transition/pop.module.css","components/Contacts/transition/filter.module.css","redux/action/app.js","redux/action/form.js","redux/action/list.js","redux/action/filter.js","redux/reducer/taskReducer.js","redux/store.js","components/Form/alert.js","redux/selectors.js","components/Form/index.js","components/Contacts/index.js","components/Filter/ContactFilter.js","App.js","index.js"],"names":["module","exports","fetchItemRequest","createAction","fetchItemSuccess","fetchItemError","fetchItems","dispatch","axios","get","then","data","catch","error","addItemRequest","addItemSuccess","addItemError","addTask","text","number","post","res","console","log","removeItemRequest","removeItemSuccess","removeItemError","removeItem","id","delete","changeFilter","items","createReducer","appAction","state","action","payload","formAction","listAction","filter","contact","filterAction","loading","combineReducers","store","configureStore","reducer","contacts","taskReducer","Alert","className","style","container","getContactsItems","getFilter","getContacts","getIsLoadingBtn","getVisibleContacts","createSelector","contack","toLowerCase","includes","Form","showAlert","handleChangeText","e","setState","target","value","handleChangeNumber","handleSubmit","preventDefault","props","map","user","setTimeout","onAddText","styles","header","CSSTransition","in","timeout","appear","classNames","unmountOnExit","title","this","redAlert","form","onSubmit","input","type","onChange","placeholder","input_number","country","button","disabled","isLoadingBtn","Component","mapDispatchToProps","addAction","connect","selectors","Contacts","onDelete","box_contact","TransitionGroup","component","list","length","key","popItem","item","onClick","PropsTypes","node","string","name","isRequired","func","selector","onChangeFilter","selection","filterStyle","label","input_cont","App","onFetchContacts","mapDispatchProps","appFetch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79e08593.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Contact_filter__2cn7S\",\"input_cont\":\"Contact_input_cont__1GHcq\",\"label\":\"Contact_label__22BKO\",\"item\":\"Contact_item__3P6HO\",\"button\":\"Contact_button__3-gGv\",\"list\":\"Contact_list__3KXQg\",\"box_contact\":\"Contact_box_contact__33PdI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Form_header__B1HhE\",\"title\":\"Form_title__lNS_Y\",\"container\":\"Form_container___cwBN\",\"form\":\"Form_form__2TM1N\",\"input\":\"Form_input__2ESfd\",\"input_number\":\"Form_input_number__2ZXKo\",\"button\":\"Form_button__243jh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Alert_container__1rc7v\",\"text\":\"Alert_text__22xAS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"alert_enter__10tOI\",\"enterActive\":\"alert_enterActive__23mND\",\"exit\":\"alert_exit__WQGvv\",\"exitActive\":\"alert_exitActive__2U44I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__2bpL5\",\"enterActive\":\"pop_enterActive__1TgHP\",\"exit\":\"pop_exit__20DOa\",\"exitActive\":\"pop_exitActive__3ql9l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"filter_enter__3AX-_\",\"enterActive\":\"filter_enterActive__WgEPX\",\"exit\":\"filter_exit__2y5F1\",\"exitActive\":\"filter_exitActive__n1mOP\"};","import {createAction} from '@reduxjs/toolkit';\nimport axios from 'axios';\n// import {FETCH_REQUST,FETCH_SUCCESS,FETCH_ERROR} from '../constanta'\n\n\nconst fetchItemRequest = createAction('contacts/fetchRequest');\nconst fetchItemSuccess = createAction('contacts/fetchSuccess');\nconst fetchItemError = createAction('contacts/fetchError');\n\n\nconst fetchItems = () => dispatch => {\n    dispatch(fetchItemRequest());\n    axios\n      .get('http://localhost:4000/contacts')\n      .then(({data})=> dispatch(fetchItemSuccess(data)))\n      .catch(error => dispatch(fetchItemError(error)))\n}\n\n\nexport default {\n  fetchItemRequest,\n  fetchItemSuccess,\n  fetchItemError,\n  fetchItems,\n};\n","import {createAction} from '@reduxjs/toolkit';\nimport axios from 'axios'\n\n\n\nconst addItemRequest = createAction('contacts/addRequest');\nconst addItemSuccess = createAction('contacts/addSuccess');\nconst addItemError = createAction('contacts/addError');\n\n\n\nconst addTask = ({text,number}) => dispatch => {\n    dispatch(addItemRequest());\n\n    axios.post('http://localhost:4000/contacts', {text,number})\n    .then(res => {\n        console.log(res.data)\n        dispatch(addItemSuccess(res.data));\n    })\n    .catch(error => dispatch(addItemError(error)));\n}\n\n\nexport default {\n    addItemRequest,\n    addItemSuccess,\n    addItemError,\n    addTask\n};","import {createAction} from '@reduxjs/toolkit';\nimport axios from 'axios';\n// import { REMOVE_REQUST, REMOVE_SUCCESS, REMOVE_ERROR } from '../constanta'\n\nconst removeItemRequest = createAction('contacts/removeRequest');\nconst removeItemSuccess = createAction('contacts/removeSuccess');\nconst removeItemError = createAction('contacts/removeError');\n\n\nconst removeItem = id => dispatch => {\n    dispatch(removeItemRequest());\n\n    axios\n      .delete(`http://localhost:4000/contacts/${id}`)\n      .then(()=> dispatch(removeItemSuccess(id)))\n      .catch(error => dispatch(removeItemError(error)))\n}\n\n\nexport default {\n  removeItemRequest,\n  removeItemSuccess,\n  removeItemError,\n  removeItem\n};\n\n","import {createAction} from '@reduxjs/toolkit'\n// import CHANGE_FILTER  from '../constanta'\n\nconst  changeFilter = createAction('contacts/changeFilter');\n\nexport default changeFilter;","import {combineReducers} from 'redux';\nimport {createReducer} from '@reduxjs/toolkit'\n\nimport appAction from '../action/app'\nimport formAction from '../action/form'\nimport listAction from '../action/list'\nimport filterAction from '../action/filter'\n\n\n\n\nconst newItemObj = (state, action) => {\n    return [...state, action.payload]\n}\nconst onRemoveItem = (state, action) => {\n    return state.filter(contact => contact.id !== action.payload);\n}\nconst changeFilter = (state,action) => {\n    return action.payload;\n}\n\n\nconst items = createReducer([],{\n    [appAction.fetchItemSuccess]:(state,action) => action.payload,\n    [formAction.addItemSuccess]: newItemObj,\n    [listAction.removeItemSuccess]: onRemoveItem,\n});\n\nconst filter = createReducer('', {\n    [filterAction]:changeFilter\n});\n\n\nconst loading = createReducer(false ,{\n    [listAction.removeItemRequest]:()=> true,\n    [listAction.removeItemSuccess]:()=> false,\n    [listAction.removeItemError]:()=> false,\n\n    [appAction.fetchItemRequest]:()=> true,\n    [appAction.fetchItemSuccess]:()=> false,\n    [appAction.fetchItemError]:()=> false,\n\n    [formAction.addItemRequest]:()=> true,\n    [formAction.addItemSuccess]:()=> false,\n    [formAction.addItemError]:()=> false,\n})\n\n\nexport default combineReducers({\n    loading,\n    items,\n    filter,\n})\n","import taskReducer from './reducer/taskReducer'\nimport {configureStore } from '@reduxjs/toolkit';\n\n\n\n\nconst store = configureStore({\n        reducer:{     \n           contacts:taskReducer,\n        },\n});\n\nexport default store;","import React from 'react'\nimport style from './Alert.module.css'\n\n\nconst Alert = ({text}) => {\n    \n    return (\n           <div className={style.container}>\n                <span className={style.text}> {text} </span>\n            </div>\n    )\n}\n\nexport default Alert;","import {createSelector} from '@reduxjs/toolkit'\n\nconst getContactsItems = state => state.contacts.items;\n\nconst getContacts = state => state.contacts; \n\nconst getIsLoadingBtn = state => state.contacts.loading;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getVisibleContacts = createSelector([getContactsItems,getFilter],(items,filter)=>{\n    return items.filter(contack => contack.text.toLowerCase().includes(filter))\n});\n\n\nexport default {\n    getContactsItems,\n    getContacts,\n    getIsLoadingBtn,\n    getFilter,\n    getVisibleContacts,\n}","import React, {Component}from 'react';\nimport {CSSTransition} from 'react-transition-group'\nimport styles from './Form.module.css'\nimport './transition/animation.css'\nimport redAlert from './transition/alert.module.css'\nimport MessageRed from './alert.js'\n\n// import taskAction from '../redux/taskAction'\nimport addAction from '../../redux/action/form'\nimport {connect} from 'react-redux'\nimport selectors from '../../redux/selectors'\n\n\nclass Form extends Component {\n    state={\n        text:'',\n        number:'',\n        showAlert:false,\n    }\n//change text in state\n    handleChangeText = e => {\n        this.setState({\n            text: e.target.value,\n        })\n    }\n//change number in state \n    handleChangeNumber = e => {\n        this.setState({\n            number: e.target.value,\n        })\n    }\n\n// push in store.state redux\n    handleSubmit = e =>{\n       e.preventDefault();\n       const {text,number} = this.state\n\n              //check for similar name\n        const contacts = this.props.state.items\n\n        const filterName = contacts.map(user => user.text)\n         \n        if(filterName.includes(text)){\n              // if name already -> it's messageRed \n            setTimeout(() => this.setState({showAlert:false}),2000)\n             this.setState({showAlert:true})\n        }else {\n              // if name not repeat -> it's ok \n            this.props.onAddText({text,number})\n        }\n\n    //remove input\n        this.setState({\n            text:'',\n            number:'',\n        })\n    }\n\n\nrender(){\n return (\n    <div className={styles.container}>\n        <div className={styles.header}>\n            <CSSTransition  in={true} timeout={500} appear={true} classNames=\"titleIn\" unmountOnExit>\n                    <h2 className={styles.title}> Phonebook </h2>\n            </CSSTransition>\n\n            <CSSTransition in={this.state.showAlert} timeout={250} classNames={redAlert} unmountOnExit>\n                     <MessageRed text=\"Contact is already\" />\n            </CSSTransition>\n        </div>\n\n    <form  className={styles.form} onSubmit={this.handleSubmit} >\n        <label>Name\n            <input \n            className={styles.input}\n            type=\"input\" \n            value={this.state.text}\n            onChange={this.handleChangeText}\n            placeholder=\"please write name\"\n            />\n         </label>\n\n         <label> Number\n            <input \n            className={styles.input_number}\n            type=\"input\" \n            country=\"US\"\n            value={this.state.number}\n            onChange={this.handleChangeNumber}\n            placeholder=\"number phone\"\n            />\n         </label>\n\n\n         <button \n            className={styles.button} \n            type=\"submit\"\n            disabled={!this.state.text}\n            >\n                { this.props.isLoadingBtn === true ? `Loading ` : `Add contact`\n                } \n         </button>\n    </form>   \n    </div>\n  )\n }\n}\n\n\n\nconst mapStateToProps = state => {\n      return {\n        isLoadingBtn:selectors.getIsLoadingBtn(state),\n        state:selectors.getContacts(state),\n    }\n}\n\n\nconst mapDispatchToProps ={\n    onAddText:addAction.addTask\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Form);","import React from 'react';\nimport PropsTypes from 'prop-types';\nimport style from './Contact.module.css'\nimport {CSSTransition, TransitionGroup} from 'react-transition-group'\nimport popItem from './transition/pop.module.css'\n\n\n// add redux connect \nimport {connect} from 'react-redux'\nimport listAction from '../../redux/action/list'\nimport selector  from '../../redux/selectors'\n\n\n// func create list item \n\nconst Contacts = ({contacts, onDelete}) => {\n    console.log(contacts);\n    return (\n    <div className={style.box_contact}>\n        <TransitionGroup component='ul'className={style.list} >\n               { contacts.length > 0 ? contacts.map((contact) => (\n                       <CSSTransition \n                            in={true} \n                            key={contact.id} \n                            classNames={popItem}\n                            timeout={250}\n                            unmountOnExit\n                            >\n                           <li className={style.item} >\n                               {contact.text} : {contact.number} \n                                <button className={style.button} onClick={()=> onDelete(contact.id)}>\n                                    x\n                                </button>\n                             </li>\n                       </CSSTransition> )\n                        )\n                : ''\n            }\n        </TransitionGroup>\n    </div>\n    )\n}\n\nContacts.PropsTypes = {\n    contacts:PropsTypes.node={\n        id:PropsTypes.string,\n        name:PropsTypes.string.isRequired,\n        number:PropsTypes.string.isRequired\n    },\n    onDelete:PropsTypes.func.isRequired,\n}\n\n\nconst mapStateToProps = (state) => ({ \n    contacts:selector.getVisibleContacts(state)\n});\n\nconst mapDispatchToProps = {\n    onDelete:listAction.removeItem\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);","import React from 'react';\nimport style from '../Contacts/Contact.module.css';\nimport { CSSTransition } from 'react-transition-group';\nimport filterStyle from '../Contacts/transition/filter.module.css';\n\n\nimport {connect} from 'react-redux'\nimport filterAction from '../../redux/action/filter'\nimport selection from  '../../redux/selectors'\n\n\n//Filter input for Contacts \nfunction ContactFilter ({value,onChangeFilter}){\n    return (\n        // не могу понять почему не работает CSSTransition\n        <CSSTransition in={true} classNames={filterStyle}  timeout={250} unmountOnExit >\n       \n        <div className={style.filter}>\n                <label  className={style.label}>\n                    Find contacts by name \n                        <input className={style.input_cont} type=\"text\"\n                            value={value}\n                            onChange={e => onChangeFilter(e.target.value)}\n                        />\n                </label>\n            </div>\n        </CSSTransition>\n    )\n}\n\n\nconst mapStateToProps = state => ({\n    value:selection.getFilter(state)\n})\n\nconst mapDispatchToProps = {\n    onChangeFilter:filterAction\n} \n\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactFilter);","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport ContactsList from './components/Contacts';\nimport ContactFilter from './components/Filter/ContactFilter';\nimport {connect} from 'react-redux';\n\n\n\nimport appFetch from './redux/action/app'\nimport selectors from './redux/selectors'\n\n\nclass App extends Component{\n    componentDidMount(){\n       this.props.onFetchContacts();\n    }\n    render(){\n        return (\n            <>\n                <Form />\n                {this.props.contacts.length > 1 && \n                    <ContactFilter /> \n                }       \n                <ContactsList/>\n            </>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => ({\n        contacts:selectors.getContactsItems(state)\n})\n\nconst mapDispatchProps = {\n    onFetchContacts:appFetch.fetchItems\n}\n\nexport default connect(mapStateToProps,mapDispatchProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}